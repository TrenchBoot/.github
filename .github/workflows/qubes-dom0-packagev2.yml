name: Test build and package QubesOS RPMs

on:
  workflow_call:
    inputs:
      qubes-component:
        description: >
          Name of QubesOS component as recognized by its build system.
        required: true
        type: string
      qubes-pkg-src-dir:
        description: >
          Relative path to directory containing Qubes OS package.
        required: false
        type: string
      qubes-pkg-version:
        description: >
          Forced version of a package.
        required: false
        type: string

jobs:
  build-and-package:
    runs-on: ubuntu-24.04
    name: Compile and package RPM
    permissions:
      # for publishing releases
      contents: write

    steps:
      - name: Install dependencies of builder script
        # docker.io was changed to docker because of conflict on containerd
        run: |
          sudo apt install --no-install-recommends --yes \
          createrepo-c devscripts python3-docker reprepro \
          python3-pathspec mktorrent python3-lxml python3-dateutil

      - uses: actions/checkout@v4
        with:
          repository: QubesOS/qubes-builderv2
          ref: 80dd898cc0472dd99f161f1d1c7c44da64de93f2
          fetch-depth: 0

      - name: Cache Docker image and dom0 stuff
        uses: actions/cache@v4
        id: docker-cache
        with:
          path: |
            /tmp/qubes-builder-fedora.tar
          key: |
            ${{ hashFiles('tools/*', 'dockerfiles/fedora.Dockerfile') }}-docker-container

      - name: Load Docker image
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: |
          docker load --input /tmp/qubes-builder-fedora.tar

      - name: Build Docker image (optional)
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          sed -i "s/RUN useradd -m user$/RUN useradd -m user -u $UID/" dockerfiles/fedora.Dockerfile
          tools/generate-container-image.sh docker

      - name: Export Docker image (optional)
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          docker save --output /tmp/qubes-builder-fedora.tar \
                      qubes-builder-fedora:latest

      - name: Prepare configuration
        env:
          URL: ${{ github.repositoryUrl }}
          COMPONENT: ${{ inputs.qubes-component }}
          PKG_DIR: ${{ inputs.qubes-pkg-src-dir }}
          PKG_VER: ${{ inputs.qubes-pkg-version }}
          # Following 2 variables are used in double expansion '${${{ github.ref_type }}}',
          # do not change these names even though they don't follow the convention.
          branch: ${{ github.head_ref }}
          tag: ${{ github.ref_name }}
        run: |
          cp example-configs/qubes-os-r4.2.yml builder.yml
          # Switch from Qubes to Docker executor
          sed -i "/^executor:$/,+4d; /^#executor:$/,+3s/#//" builder.yml

          branch_name=${${{ github.ref_type }}}
          if [ -z "$branch_name" ]; then
              # github.head_ref is set only for pull requests, this should
              # handle pushes
              branch_name=$(basename "$GITHUB_REF")
          fi

          if [ -n "$PKG_DIR" ]; then
              #
              # 1. Clone repository locally
              # 2. Add files required by qubes-builderv2
              # 3. Commit them
              # 4. Put local path as a repository URL to configuration file
              #

              # `plugins/fetch` is copied inside Docker container, place clone there
              rel_clone_dir=plugins/fetch/tmp_clone
              clone_dir=qubesbuilder/$rel_clone_dir
              git clone --depth 1 --branch "$branch_name" "${URL/git:/https:}" "$clone_dir"

              # qubes-builderv2 expects top directory of extracted sources to
              # follow "name-version" naming scheme and will fail if other
              # naming is used
              #
              # At the same time when generating a source archive, it uses
              # naming scheme from `Source0`, which inevitably leads to a
              # failure if it's not what qubes-builderv2 expects.
              sed '/^Source0:/s/\t.*/\t%{name}-%{version}.tar.gz/' \
                  "$clone_dir/$PKG_DIR/$COMPONENT.spec.in" \
                  > "$clone_dir/$COMPONENT.spec.in.tmp"
              # Temporary file handles case when qubes-pkg-src-dir is set to '.'
              mv "$clone_dir/$COMPONENT.spec.in.tmp" "$clone_dir/$COMPONENT.spec.in"

              echo 1 > "$clone_dir/rel"
              if [ -z "$PKG_VER" ]; then
                  PKG_VER="0+$(git -C "$clone_dir" show-ref -s "$branch_name" | head -1)"
              fi
              echo "$PKG_VER" > "$clone_dir/version"
              cat > "$clone_dir/.qubesbuilder" <<EOF
              host:
                rpm:
                  build:
                  - $COMPONENT.spec
          EOF
              git config --global user.name user.name
              git config --global user.email user.email
              git -C "$clone_dir" add .
              git -C "$clone_dir" commit -m 'CI changes'
              if [ ${{ github.ref_type }} = tag ]; then
                # Without this original commit is going to be used
                git -C "$clone_dir" tag -f "$branch_name"
              fi

              # If it's an existing component without options in builder.yml,
              # just remove the line from the file
              sed -i "/^  - $COMPONENT$/d" builder.yml

              # If it's an existing component with options in builder.yml,
              # rename it to a dummy component. This avoids having a duplicated
              # name and at the same time doesn't require the removal of options
              sed -i "/^  - $COMPONENT:$/c\ \ - does_not_exist:" builder.yml

              # Add a new component to builder.yml
              sed -i "/^components:/a\  - $COMPONENT:" builder.yml
              sed -i "/^  - $COMPONENT:/a\      verification-mode: insecure-skip-checking" builder.yml
              sed -i "/^  - $COMPONENT:/a\      branch: $branch_name" builder.yml
              sed -i "/^  - $COMPONENT:/a\      url: /builder/$rel_clone_dir" builder.yml
          else
              # It's an existing component that needs some overrides
              sed -i "1,/^  - $COMPONENT/s#^  - $COMPONENT#&:#" builder.yml
              sed -i "/^  - $COMPONENT:/a\      verification-mode: insecure-skip-checking" builder.yml
              sed -i "/^  - $COMPONENT:/a\      branch: $branch_name" builder.yml
              sed -i "/^  - $COMPONENT:/a\      url: ${URL/git:/https:}" builder.yml
          fi

          echo "::group::builder.yml"
          cat builder.yml
          echo "::endgroup::"

          echo "::group::version"
          cat $clone_dir/version
          echo "::endgroup::"

          echo "::group::$COMPONENT.spec.in"
          cat $clone_dir/$COMPONENT.spec.in
          echo "::endgroup::"

          echo "::group::.qubesbuilder"
          cat $clone_dir/.qubesbuilder
          echo "::endgroup::"

      - name: Build and package
        env:
          DEBUG: ${{ runner.debug == 1 && '--debug --verbose' || '' }}
        run: |
          ./qb $DEBUG -c ${{ inputs.qubes-component }} package fetch prep build
          rpms=( $(find "artifacts/components/${{ inputs.qubes-component }}/" -regex ".*/build/rpm/[^/]*.rpm") )
          cp --verbose "${rpms[@]}" .

      - name: Save built packages
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: qubesos.dom0.fc37-${{ inputs.qubes-component }}-${{ github.sha }}
          path: '*.rpm'

      - name: Construct release's description
        if: github.event_name == 'push' && github.ref_type == 'tag'
        run: |
          for artifact in *.rpm; do
            echo "### $artifact" >> release-body.md
            echo '```' >> release-body.md
            echo "wget --quiet '${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/$artifact'" >> release-body.md
            echo '```' >> release-body.md
            echo '```' >> release-body.md
            echo "curl --remote-name '${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/$artifact'" >> release-body.md
            echo '```' >> release-body.md
          done

      - name: Create release for a new tag
        if: github.event_name == 'push' && github.ref_type == 'tag'
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: '*.rpm'
          artifactErrorsFailBuild: true
          bodyFile: "release-body.md"
