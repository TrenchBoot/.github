name: Test build and package QubesOS RPMs

on:
  workflow_call:
    inputs:
      base-commit:
        description: >
          First upstream commit to be used as a base for `git format-patch`
          command.
        required: true
        type: string
      patch-start:
        description: >
          --start-number argument for `git format-patch` command.
        required: true
        type: number
      qubes-component:
        description: >
          Name of QubesOS component as recognized by its build system.
        required: true
        type: string
      spec-pattern:
        description: >
          `sed` pattern used to find insert position for patches in *.spec.in
          files.
        required: true
        type: string
      spec-file:
        description: >
          Name used for *.spec.in file, if not present `qubes-component` is
          stripped from everything before last '-' (e.g. `vmm-xen` -> `xen`).
          Extensions ('.spec.in') are always added, don't specify them here.
        required: false
        type: string

jobs:
  build-and-package:
    runs-on: ubuntu-latest
    name: Compile and package as QubesOS RPM
    permissions:
      # for publishing releases
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100 # need history for `git format-patch`

      - uses: actions/checkout@v4
        with:
          repository: TrenchBoot/.github
          path: shared
          ref: ${{ github.job_workflow_sha }}

      - name: Cache Docker image and dom0 stuff
        uses: actions/cache@v4
        id: docker-cache
        with:
          path: |
            /tmp/qubes-fedora-builder.tar
            /tmp/cache/dom0.tar
          key: |
            ${{ hashFiles('shared/qubes-builder-docker/*') }}-docker-container

      - name: Load Docker image
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: |
          docker load --input /tmp/qubes-fedora-builder.tar

      - name: Build Docker image (optional)
        if: steps.docker-cache.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v5
        with:
          tags: qubes-fedora-builder:latest
          context: shared/qubes-builder-docker

      - name: Export Docker image (optional)
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          docker save --output /tmp/qubes-fedora-builder.tar \
                      qubes-fedora-builder:latest

      - name: Prepare dom0 cache storage (optional)
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          mkdir --mode=777 /tmp/cache

      - name: Build and package
        run: |
          docker run --privileged \
                     -v /tmp/cache:/tmp/cache/ \
                     -v "$GITHUB_WORKSPACE:$GITHUB_WORKSPACE" \
                     -w "$GITHUB_WORKSPACE" \
                     -e "COMPONENT=${{ inputs.qubes-component }}" \
                     -e "PATCH_START=${{ inputs.patch-start }}" \
                     -e "BASE_COMMIT=${{ inputs.base-commit }}" \
                     -e "SPEC_PATTERN=${{ inputs.spec-pattern }}" \
                     -e "SPEC_FILENAME=${{ inputs.spec-file }}" \
                     qubes-fedora-builder:latest

      - name: Save built packages
        uses: actions/upload-artifact@v4
        with:
          name: qubesos.dom0.fc37-${{ inputs.qubes-component }}-${{ github.sha }}
          path: '*.rpm'

      - name: Construct release's description
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
        run: |
          for artifact in *.rpm; do
            echo "### $artifact" >> release-body.md
            echo '```' >> release-body.md
            echo "wget --quiet '${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/$artifact'" >> release-body.md
            echo '```' >> release-body.md
            echo '```' >> release-body.md
            echo "curl --remote-name '${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref_name }}/$artifact'" >> release-body.md
            echo '```' >> release-body.md
          done

      - name: Create release for a new tag
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
        uses: ncipollo/release-action@v1.13.0
        with:
          artifacts: '*.rpm'
          artifactErrorsFailBuild: true
          bodyFile: "release-body.md"
